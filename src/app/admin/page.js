'use client'

import { useState, useEffect } from 'react'
import { client } from '@/sanity/client'
import { generateTagsFromContent, generateTagsFromTitle } from '@/utils/tagGenerator'

export default function AdminPage() {
  const [posts, setPosts] = useState([])
  const [selectedPost, setSelectedPost] = useState(null)
  const [generatedTags, setGeneratedTags] = useState([])
  const [isGenerating, setIsGenerating] = useState(false)
  const [message, setMessage] = useState('')
  const [error, setError] = useState(null)

  // 投稿記事を取得
  useEffect(() => {
    async function fetchPosts() {
      try {
        setMessage('投稿記事を読み込み中...')
        
        // より単純なクエリを使用
        const query = `*[_type == "post"] | order(publishedAt desc) {
          _id,
          title,
          slug,
          body,
          publishedAt
        }`
        
        const fetchedPosts = await client.fetch(query)
        setPosts(fetchedPosts)
        setMessage('')
        setError(null)
        
      } catch (error) {
        console.error('Error fetching posts:', error)
        setError('投稿記事の取得に失敗しました: ' + error.message)
        setMessage('')
        
        // フォールバック: サンプルデータを使用
        const samplePosts = [
          {
            _id: 'sample-1',
            title: 'Next.jsとReactでTypeScriptアプリ開発',
            slug: { current: 'nextjs-react-typescript' },
            body: [
              {
                _type: 'block',
                children: [
                  { text: 'この記事では、Next.jsとReactを使ってTypeScriptでWebアプリケーションを開発する方法を説明します。フロントエンド開発において、パフォーマンスとセキュリティは重要な要素です。' }
                ]
              }
            ],
            publishedAt: new Date().toISOString()
          },
          {
            _id: 'sample-2', 
            title: '僧侶として学ぶプログラミングの道',
            slug: { current: 'monk-programming' },
            body: [
              {
                _type: 'block',
                children: [
                  { text: '現役僧侶として、仏教の教えとプログラミング学習を両立させる方法について考察します。修行と開発の共通点を探ります。' }
                ]
              }
            ],
            publishedAt: new Date().toISOString()
          }
        ]
        setPosts(samplePosts)
      }
    }
    
    fetchPosts()
  }, [])

  // タグを生成
  const handleGenerateTags = async (post) => {
    setIsGenerating(true)
    setMessage('')
    
    try {
      // タイトルと本文からタグを生成
      const titleTags = post.title ? generateTagsFromTitle(post.title) : []
      const contentTags = post.body ? generateTagsFromContent(post.body) : []
      
      // 重複を除去してマージ
      const allTags = Array.from(new Set([...titleTags, ...contentTags]))
      const finalTags = allTags.slice(0, 8)
      
      setGeneratedTags(finalTags)
      setSelectedPost(post)
      setMessage(`${finalTags.length}個のタグを生成しました`)
      
    } catch (error) {
      console.error('Tag generation error:', error)
      setMessage('タグの生成に失敗しました')
    } finally {
      setIsGenerating(false)
    }
  }

  // タグをSanityに保存
  const handleSaveTags = async () => {
    if (!selectedPost || generatedTags.length === 0) return
    
    try {
      // サンプルデータの場合は保存をシミュレート
      if (selectedPost._id.startsWith('sample-')) {
        setMessage('デモモード: タグが生成されました（実際の保存はされていません）')
        
        // 投稿記事リストを更新
        setPosts(prev => 
          prev.map(post => 
            post._id === selectedPost._id 
              ? { ...post, autoGeneratedTags: generatedTags }
              : post
          )
        )
        return
      }
      
      // 実際のSanityデータの場合
      await client
        .patch(selectedPost._id)
        .set({ autoGeneratedTags: generatedTags })
        .commit()
      
      setMessage('タグを保存しました')
      
      // 投稿記事リストを更新
      setPosts(prev => 
        prev.map(post => 
          post._id === selectedPost._id 
            ? { ...post, autoGeneratedTags: generatedTags }
            : post
        )
      )
      
    } catch (error) {
      console.error('Save error:', error)
      setMessage('タグの保存に失敗しました: ' + error.message)
    }
  }

  return (
    <div className="max-w-6xl mx-auto p-6 bg-white min-h-screen">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-800 mb-2">
          🏷️ タグ管理システム
        </h1>
        <p className="text-gray-600">
          投稿記事からタグを自動生成して管理します
        </p>
      </div>

      {error && (
        <div className="mb-6 p-4 rounded-lg bg-yellow-100 text-yellow-800 border border-yellow-300">
          <div className="font-semibold mb-2">⚠️ Sanity接続エラー</div>
          <div className="text-sm">{error}</div>
          <div className="text-sm mt-2">サンプルデータを使ってタグ生成機能をテストできます。</div>
        </div>
      )}

      {message && (
        <div className={`mb-6 p-4 rounded-lg ${
          message.includes('失敗') || message.includes('エラー') 
            ? 'bg-red-100 text-red-700 border border-red-300'
            : message.includes('デモモード')
            ? 'bg-blue-100 text-blue-700 border border-blue-300'
            : 'bg-green-100 text-green-700 border border-green-300'
        }`}>
          {message}
        </div>
      )}

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* 投稿記事リスト */}
        <div className="bg-gray-50 rounded-lg p-6">
          <h2 className="text-xl font-semibold mb-4 text-gray-800">
            📝 投稿記事
          </h2>
          
          <div className="space-y-4 max-h-96 overflow-y-auto">
            {posts.map((post) => (
              <div 
                key={post._id}
                className="bg-white p-4 rounded-lg shadow border hover:shadow-md transition-shadow"
              >
                <h3 className="font-medium text-gray-800 mb-2">
                  {post.title}
                </h3>
                
                <div className="text-sm text-gray-500 mb-3">
                  {new Date(post.publishedAt).toLocaleDateString('ja-JP')}
                </div>
                
                {post.autoGeneratedTags && post.autoGeneratedTags.length > 0 && (
                  <div className="mb-3">
                    <div className="text-xs text-gray-600 mb-1">現在のタグ:</div>
                    <div className="flex flex-wrap gap-1">
                      {post.autoGeneratedTags.map((tag, index) => (
                        <span 
                          key={index}
                          className="px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded"
                        >
                          {tag}
                        </span>
                      ))}
                    </div>
                  </div>
                )}
                
                <button
                  onClick={() => handleGenerateTags(post)}
                  disabled={isGenerating}
                  className="w-full bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:bg-gray-400 transition-colors text-sm"
                >
                  {isGenerating ? '生成中...' : 'タグを生成'}
                </button>
              </div>
            ))}
          </div>
        </div>

        {/* タグ生成結果 */}
        <div className="bg-gray-50 rounded-lg p-6">
          <h2 className="text-xl font-semibold mb-4 text-gray-800">
            🎯 タグ生成結果
          </h2>
          
          {selectedPost ? (
            <div className="bg-white p-4 rounded-lg shadow">
              <h3 className="font-medium text-gray-800 mb-4">
                「{selectedPost.title}」のタグ
              </h3>
              
              {generatedTags.length > 0 ? (
                <>
                  <div className="mb-4">
                    <div className="text-sm text-gray-600 mb-2">
                      生成されたタグ ({generatedTags.length}個):
                    </div>
                    <div className="flex flex-wrap gap-2">
                      {generatedTags.map((tag, index) => (
                        <span 
                          key={index}
                          className="px-3 py-1 bg-green-100 text-green-700 rounded-full text-sm"
                        >
                          {tag}
                        </span>
                      ))}
                    </div>
                  </div>
                  
                  <button
                    onClick={handleSaveTags}
                    className="w-full bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 transition-colors"
                  >
                    タグを保存
                  </button>
                </>
              ) : (
                <div className="text-gray-500 text-center py-8">
                  「タグを生成」ボタンをクリックしてください
                </div>
              )}
            </div>
          ) : (
            <div className="bg-white p-4 rounded-lg shadow text-center text-gray-500 py-8">
              記事を選択してタグを生成してください
            </div>
          )}
        </div>
      </div>
      
      <div className="mt-8 p-4 bg-blue-50 rounded-lg">
        <h3 className="font-semibold text-blue-800 mb-2">💡 使い方</h3>
        <ul className="text-sm text-blue-700 space-y-1">
          <li>1. 左側から記事を選択</li>
          <li>2. 「タグを生成」ボタンをクリック</li>
          <li>3. 生成されたタグを確認</li>
          <li>4. 「タグを保存」ボタンでSanityに保存</li>
        </ul>
      </div>
    </div>
  )
}